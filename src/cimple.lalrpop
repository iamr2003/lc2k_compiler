// starting with the simple calculat example in lalrpop
use std::str::FromStr;
use crate::ast::{Expr, Opcode}; // (0)

grammar;

pub Block: Vec<Box<Expr>> = {
    <s:Statement> => vec![s],
    <s:Statement> <b:Block> => {let mut out = vec![s];out.extend(b.clone()); out},
    <s:Statement> <e:Expr> => {let mut out = vec![s];out.push(e); out},
    <e:Expr>";" => vec![e]
}

pub Statement: Box<Expr> = {
    <id:Id> " = " <ex:Expr>";" => Box::new(Expr::Assign(id.to_string(),ex)),
}

pub Expr: Box<Expr> = { // (1)
    Expr ExprOp Factor => Box::new(Expr::Op(<>)), // (2)
    Id => Box::new(Expr::Var(<>)),
    Factor,
};


ExprOp: Opcode = { // (3)
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
//    "/" => Opcode::Div,
};

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)), // (4)
    "(" <Expr> ")"
};

Num: i8 = {
    r"[0-9]+" => i8::from_str(<>).unwrap()
};

Id: String = <s:r"[a-zA-Z][a-zA-Z0-9_]*"> => String::from(s);

